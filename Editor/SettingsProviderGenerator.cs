using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace AStar.Settings
{
    public partial class SettingsProviderGenerator
    {
        private static readonly string M_DIRECTORY =
            Path.Combine(Application.dataPath, "Editor", "AutoGeneratedSettingProvider");

        private struct SourceCode
        {
            public string Namespace;
            public string ClassName;
            public string Code;
        }

        [MenuItem("Tools/AStar.Settings/Generate Settings Provider")]
        public static void GenerateSettingsProvider()
        {
            BeginLog();
            CleanProviders();
            foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                foreach (TypeInfo type in assembly.DefinedTypes)
                {
                    if (!IsSettings(type)) continue;
                    SourceCode code = GetSettingsProviderCode(type);
                    string filename = $"{code.ClassName}.gen.cs";
                    string path = CreateProviderFile(filename, code.Code);
                    LogOnGenerated(assembly, type, filename);
                }
            }

            EndLog();
        }

        private static SourceCode GetSettingsProviderCode(Type type)
        {
            const string @namespace = "AStar.SettingsProviders";
            string fullname = type.FullName;
            string classname = $"{type.Name}Provider";
            string code = $@"
// This code is auto generated, don't edit it!

namespace {@namespace}
{{
    internal sealed class {classname} : AStar.Settings.SettingsProviderBase<{classname}, {fullname}>
    {{
        [UnityEditor.SettingsProvider]
        public static UnityEditor.SettingsProvider CreateProvider() => CreateProviderInternal();

        protected override {fullname} GetInstance() => {fullname}.Instance;
    }}
}}"
                ;
            return new SourceCode
            {
                Namespace = @namespace,
                ClassName = classname,
                Code = code
            };
        }

        [MenuItem("Tools/AStar.Settings/Clean Providers")]
        private static void CleanProviders()
        {
            if (!Directory.Exists(M_DIRECTORY)) return;
            Directory.Delete(M_DIRECTORY, true);
        }

        private static string CreateProviderFile(string filename, string code)
        {
            if (!Directory.Exists(M_DIRECTORY))
                Directory.CreateDirectory(M_DIRECTORY);
            string path = Path.Combine(M_DIRECTORY, filename);
            byte[] data = Encoding.UTF8.GetBytes(code);
            FileStream file = File.Open(path, FileMode.OpenOrCreate);
            file.SetLength(0);
            file.Write(data);
            file.Close();
            return path;
        }

        private static bool IsSettings(Type type)
        {
            string interfaceName = typeof(IEditOnProjectSettings).FullName;
            string baseName = typeof(SettingsBase<>).Name;
            const string targetAssemblyName = "AStar.Settings.Runtime";

            Type @base = type.BaseType;
            if (@base == null) return false;
            if (@base.Assembly.GetName().Name != targetAssemblyName) return false;
            if (type.GetInterface(interfaceName) == null) return false;
            if (!@base.Name.Contains(baseName)) return false;
            if (!type.IsSealed)
            {
                Debug.LogError($"{type.FullName} is inherited by SettingsBase<T> but is not sealed");
                return false;
            }

            return true;
        }
    }
}